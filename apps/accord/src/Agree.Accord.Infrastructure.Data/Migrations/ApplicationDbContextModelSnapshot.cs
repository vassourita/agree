// <auto-generated />
using System;
using Agree.Accord.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agree.Accord.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agree.Accord.Domain.Identity.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<ushort>("Tag")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("Tag", "Username")
                        .IsUnique();

                    b.ToTable("UserAccounts", (string)null);
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PrivacyLevel")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Servers", (string)null);
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.ServerMember", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerMembers", (string)null);
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.ServerRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerRoles", (string)null);
                });

            modelBuilder.Entity("Agree.Accord.Domain.Social.DirectMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<Guid?>("ToId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("DirectMessages", (string)null);
                });

            modelBuilder.Entity("Agree.Accord.Domain.Social.Friendship", b =>
                {
                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FromId", "ToId");

                    b.HasIndex("ToId");

                    b.ToTable("Friendships", (string)null);
                });

            modelBuilder.Entity("ServerMemberRoles", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerMembersUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerMembersServerId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "ServerMembersUserId", "ServerMembersServerId");

                    b.HasIndex("ServerMembersUserId", "ServerMembersServerId");

                    b.ToTable("ServerMemberRoles");
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.Category", b =>
                {
                    b.HasOne("Agree.Accord.Domain.Servers.Server", "Server")
                        .WithMany("Categories")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.ServerMember", b =>
                {
                    b.HasOne("Agree.Accord.Domain.Servers.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agree.Accord.Domain.Identity.UserAccount", "User")
                        .WithMany("Servers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.ServerRole", b =>
                {
                    b.HasOne("Agree.Accord.Domain.Servers.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Agree.Accord.Domain.Social.DirectMessage", b =>
                {
                    b.HasOne("Agree.Accord.Domain.Identity.UserAccount", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Agree.Accord.Domain.Identity.UserAccount", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Agree.Accord.Domain.Social.Friendship", b =>
                {
                    b.HasOne("Agree.Accord.Domain.Identity.UserAccount", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agree.Accord.Domain.Identity.UserAccount", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("ServerMemberRoles", b =>
                {
                    b.HasOne("Agree.Accord.Domain.Servers.ServerRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agree.Accord.Domain.Servers.ServerMember", null)
                        .WithMany()
                        .HasForeignKey("ServerMembersUserId", "ServerMembersServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Agree.Accord.Domain.Identity.UserAccount", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Agree.Accord.Domain.Servers.Server", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Members");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
